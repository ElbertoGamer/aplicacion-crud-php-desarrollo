name: CI/CD

on:
  # Permite ejecutar el flujo de trabajo de manera manual
  workflow_dispatch:
  
  # Ejecuta el flujo de trabajo al hacer un git push  
  push:
     branches: ["main"]
  #  branches:
  #    - main  # Se ejecutará cuando haya un push en main
  pull_request:
     branches: ["main"]
    #  branches:
  #    - main    # Se ejecutará cuando haya un pull request en main   

jobs:
# Trabajo 1: Integración contínua (CI). Construye a imagen de la aplicación y la sube a un registro de contenedores (Docker Hub)
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Login en Docker Hub
        uses: docker/login-action@v3
        with:
# Hay que configurar los siguientes secretos
# Settings > Secrets and variables > Actions > New repository secret
# DOCKER_USERNAME → Tu usuario de Docker Hub.
# DOCKER_PASSWORD → Tu token de acceso de Docker Hub (en lugar de la contraseña, genera un token en Docker Hub). Asiga TODOS los permisos.

          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Construir y etiquetar la imagen (BUILD)
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/lamp-crud-app:latest .
      
      - name: Subir imagen a Docker Hub (PUSH)
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/lamp-crud-app:latest

# Otra manera
      #- name: Build and push
      #  uses: docker/build-push-action@v4
      #  with:
      #    context: .
      #    push: true
      #    tags: ${{ secrets.DOCKER_USERNAME }}/lamp-crud-app:latest

 
  deploy:
  # Trabajo 2: Despliegue contínuo (CD). Actualiza aplicación  en producción y descarga la imagen del registro de contenedores (Docker Hub)
    runs-on: ubuntu-latest
  # Hasta que no se acabe el trabajo 1, no se inicia este trabajo
    needs: build-and-push
  # Hay que configurar los siguientes secretos:
  # Settings > Secrets and variables > Actions > New repository secret
  # SSH_HOST → IP elástica o ombre DNS servidor de producción
  # SSH_USER → Usuario SSH. En EC2 de tipo Ubuntu en AWS: ubuntu      
  # SSH_KEY → Clave privada acceso por certificado
  # SSH_PORT → Puerto de escucha servicio SSH. Normalmente el 22.   
    steps:
      - name: Despliegue en servidor de produccion
        uses: appleboy/ssh-action@v1.2.1
        with:
           host: ${{ secrets.SSH_HOST }}
           username: ${{ secrets.SSH_USER }}
           key: ${{ secrets.SSH_KEY }}
           port: ${{ secrets.SSH_PORT }}   
           script: |
               cd environment/aplicacion-crud-php-produccion/
               git pull origin main
               docker compose down
               docker compose pull apache
               docker compose up -d             
